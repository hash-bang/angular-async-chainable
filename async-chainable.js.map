{"version":3,"names":[],"mappings":"","sources":["async-chainable.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.asyncChainable = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nangular.module('angular-async-chainable', [])\n.service('$async', function() {\n\tif (!window.asyncChainable) return console.error('asyncChainable not loaded!');\n\treturn window.asyncChainable;\n});\n\n},{}],2:[function(require,module,exports){\nvar async = require('async');\n\n/**\n* Examines an argument stack and returns all passed arguments as a CSV\n* e.g.\n*\tfunction test () { getOverload(arguments) };\n*\ttest('hello', 'world') // 'string,string'\n*\ttest(function() {}, 1) // 'function,number'\n*\ttest('hello', 123, {foo: 'bar'}, ['baz'], [{quz: 'quzValue'}, {quuz: 'quuzValue'}]) // 'string,number,object,array,collection'\n*\n* @param object args The special JavaScript 'arguments' object\n* @return string CSV of all passed arguments\n*/\nfunction getOverload(args) {\n\tvar i = 0;\n\tvar out = [];\n\twhile(1) {\n\t\tvar argType = typeof args[i];\n\t\tif (argType == 'undefined') break;\n\t\tif (argType == 'object' && Object.prototype.toString.call(args[i]) == '[object Array]') { // Special case for arrays being classed as objects\n\t\t\targType = 'array';\n\t\t\tif (args[i].length && args[i].every(function(item) {\n\t\t\t\treturn (typeof item == 'object' && Object.prototype.toString.call(item) == '[object Object]');\n\t\t\t}))\n\t\t\t\targType = 'collection';\n\t\t}\n\t\tout.push(argType);\n\t\ti++;\n\t}\n\treturn out.toString();\n};\n\n// Utility functions {{{\n/**\n* Return true if a variable is an array\n* @param mixed thing The varable to examine\n* @return bool True if the item is a classic JS array and not an object\n*/\nfunction isArray(thing) {\n\treturn (\n\t\ttypeof thing == 'object' &&\n\t\tObject.prototype.toString.call(thing) == '[object Array]'\n\t);\n}\n\n\n/**\n* Return true if a variable is an object\n* @param mixed thing The varable to examine\n* @return bool True if the item is a classic JS array and not an object\n*/\nfunction isObject(thing) {\n\treturn (\n\t\ttypeof thing == 'object' &&\n\t\tObject.prototype.toString.call(thing) != '[object Array]'\n\t);\n}\n// }}}\n\n// Plugin functionality - via `use()`\nvar _plugins = {};\nfunction use(module) {\n\tmodule.call(this);\n\treturn this;\n};\n// }}}\n\n/**\n* Queue up a function(s) to execute in series\n* @param array,object,function The function(s) to execute\n* @return object This chainable object\n*/\nfunction series() {\n\tvar calledAs = getOverload(arguments);\n\tswitch(calledAs) {\n\t\tcase '':\n\t\t\t// Pass\n\t\t\tbreak;\n\t\tcase 'function': // Form: series(func)\n\t\t\tthis._struct.push({ type: 'seriesArray', payload: [arguments[0]] });\n\t\t\tbreak;\n\t\tcase  'string,function': // Form: series(String <id>, func)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[0]] = arguments[1];\n\t\t\tthis._struct.push({ type: 'seriesObject', payload: payload});\n\t\t\tbreak;\n\t\tcase 'array': // Form: series(Array <funcs>)\n\t\t\tthis._struct.push({ type: 'seriesArray', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'object': // Form: series(Object <funcs>)\n\t\t\tthis._struct.push({ type: 'seriesObject', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'collection': // Form: series(Collection <funcs>)\n\t\t\tthis._struct.push({ type: 'seriesCollection', payload: arguments[0] });\n\t\t\tbreak;\n\n\t\t// Async library compatibility {{{\n\t\tcase 'array,function':\n\t\t\tthis._struct.push({ type: 'seriesArray', payload: arguments[0] });\n\t\t\tthis.end(arguments[1]);\n\t\t\tbreak;\n\t\tcase 'object,function':\n\t\t\tthis._struct.push({ type: 'seriesObject', payload: arguments[0] });\n\t\t\tthis.end(arguments[1]);\n\t\t\tbreak;\n\t\t// }}}\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .series(): ' + calledAs);\n\t}\n\n\treturn this;\n};\n\n\n/**\n* Queue up a function(s) to execute in parallel\n* @param array,object,function The function(s) to execute\n* @return object This chainable object\n*/\nfunction parallel() {\n\tvar calledAs = getOverload(arguments)\n\tswitch (calledAs) {\n\t\tcase '':\n\t\t\t// Pass\n\t\t\tbreak;\n\t\tcase 'function': // Form: parallel(func)\n\t\t\tthis._struct.push({ type: 'parallelArray', payload: [arguments[0]] });\n\t\t\tbreak;\n\t\tcase 'string,function': // Form: parallel(String <id>, func)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[0]] = arguments[1];\n\t\t\tthis._struct.push({ type: 'parallelArray', payload: payload });\n\t\t\tbreak;\n\t\tcase 'array': // Form: parallel(Array <funcs>)\n\t\t\tthis._struct.push({ type: 'parallelArray', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'object': // Form: parallel(Object <funcs>)\n\t\t\tthis._struct.push({ type: 'parallelObject', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'collection': // Form: parallel(Collection <funcs>)\n\t\t\tthis._struct.push({ type: 'parallelCollection', payload: arguments[0] });\n\t\t\tbreak;\n\n\t\t// Async library compatibility {{{\n\t\tcase 'array,function':\n\t\t\tthis._struct.push({ type: 'parallelArray', payload: arguments[0] });\n\t\t\tthis.end(arguments[1]);\n\t\t\tbreak;\n\t\tcase 'object,function':\n\t\t\tthis._struct.push({ type: 'parallelObject', payload: arguments[0] });\n\t\t\tthis.end(arguments[1]);\n\t\t\tbreak;\n\t\t// }}}\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .parallel(): ' + calledAs);\n\t}\n\n\treturn this;\n};\n\n\n/**\n* Run an array/object/collection though a function\n* This is similar to the async native .each() function but chainable\n*/\nfunction forEach() {\n\tvar calledAs = getOverload(arguments)\n\tswitch (calledAs) {\n\t\tcase '':\n\t\t\t// Pass\n\t\t\tbreak;\n\t\tcase 'collection,function': // Form: forEach(Collection func)\n\t\tcase 'array,function': // Form: forEach(Array, func)\n\t\t\tthis._struct.push({ type: 'forEachArray', payload: arguments[0], callback: arguments[1] });\n\t\t\tbreak;\n\t\tcase 'object,function': // Form: forEach(Object, func)\n\t\t\tthis._struct.push({ type: 'forEachObject', payload: arguments[0], callback: arguments[1] });\n\t\t\tbreak;\n\t\tcase 'string,function': // Form: forEach(String <set lookup>, func)\n\t\t\tthis._struct.push({ type: 'forEachLateBound', payload: arguments[0], callback: arguments[1] });\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .forEach(): ' + calledAs);\n\t}\n\n\treturn this;\n}\n\n\n// Defer functionality - Here be dragons! {{{\n/**\n* Collection of items that have been deferred\n* @type collection {payload: function, id: null|String, prereq: [dep1, dep2...]}\n* @access private\n*/\nfunction deferAdd(id, task, parentChain) {\n\tvar self = this;\n\tparentChain.waitingOn = (parentChain.waitingOn || 0) + 1;\n\n\tif (! parentChain.waitingOnIds)\n\t\tparentChain.waitingOnIds = [];\n\tparentChain.waitingOnIds.push(id);\n\n\tself._deferred.push({\n\t\tid: id || null,\n\t\tprereq: parentChain.prereq || [],\n\t\tpayload: function(next) {\n\t\t\tself._context._id = id;\n\t\t\ttask.call(self._options.context, function(err, value) {\n\t\t\t\tif (id)\n\t\t\t\t\tself._context[id] = value;\n\t\t\t\tself._deferredRunning--;\n\t\t\t\tif (--parentChain.waitingOn == 0) {\n\t\t\t\t\tparentChain.completed = true;\n\t\t\t\t\tif (self._struct.length && self._struct[self._structPointer].type == 'await')\n\t\t\t\t\t\tself._execute(err);\n\t\t\t\t}\n\t\t\t\tself._execute(err);\n\t\t\t});\n\t\t}\n\t});\n};\n\n\nfunction _deferCheck() {\n\tvar self = this;\n\tif (self._options.limit && self._deferredRunning >= self._options.limit) return; // Already over limit\n\tself._deferred = self._deferred.filter(function(item) {\n\t\tif (self._options.limit && self._deferredRunning >= self._options.limit) {\n\t\t\treturn true; // Already over limit - all subseqent items should be left in place\n\t\t}\n\t\tif (\n\t\t\titem.prereq.length == 0 || // No pre-reqs - can execute now\n\t\t\titem.prereq.every(function(dep) { // All pre-reqs are satisfied\n\t\t\t\treturn self._context.hasOwnProperty(dep);\n\t\t\t})\n\t\t) { \n\t\t\tself._deferredRunning++;\n\t\t\tsetTimeout(item.payload);\n\t\t\treturn false;\n\t\t} else { // Can't do anything with self right now\n\t\t\treturn true;\n\t\t}\n\t});\n};\n// }}}\n\n\n/**\n* Queue up a function(s) to execute as deferred - i.e. dont stop to wait for it\n* @param array,object,function The function(s) to execute as a defer\n* @return object This chainable object\n*/\nfunction defer() {\n\tvar calledAs = getOverload(arguments);\n\tswitch (calledAs) {\n\t\tcase '':\n\t\t\t// Pass\n\t\t\tbreak;\n\t\tcase 'function': // Form: defer(func)\n\t\t\tthis._struct.push({ type: 'deferArray', payload: [arguments[0]] });\n\t\t\tbreak;\n\t\tcase 'string,function': // Form: defer(String <id>, func)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[0]] = arguments[1];\n\t\t\tthis._struct.push({ type: 'deferObject', payload: payload });\n\t\t\tbreak;\n\t\tcase 'array': // Form: defer(Array <funcs>)\n\t\t\tthis._struct.push({ type: 'deferArray', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'object': // Form: defer(Object <funcs>)\n\t\t\tthis._struct.push({ type: 'deferObject', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'collection': // Form defer(Collection <funcs>)\n\t\t\tthis._struct.push({ type: 'deferCollection', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'array,function': // Form: defer(Array <prereqs>, func)\n\t\t\tthis._struct.push({ type: 'deferArray', prereq: arguments[0], payload: [arguments[1]] });\n\t\t\tbreak;\n\t\tcase 'string,string,function': // Form: defer(String <prereq>, String <name>, func)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[1]] = arguments[2];\n\t\t\tthis._struct.push({ type: 'deferObject', prereq: [arguments[0]], payload: payload });\n\t\t\tbreak;\n\t\tcase 'array,string,function': //Form: defer(Array <prereqs>, String <id>, func)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[1]] = arguments[2];\n\t\t\tthis._struct.push({ type: 'deferObject', prereq: arguments[0], payload: payload });\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .defer():' + calledAs);\n\t}\n\n\treturn this;\n};\n\n\n/**\n* Queue up an await point\n* This stops the execution queue until its satisfied that dependencies have been resolved\n* @param array,... The dependencies to check resolution of. If omitted all are checked\n* @return object This chainable object\n*/\nfunction await() {\n\tvar payload = [];\n\n\t// Slurp all args into payload {{{\n\tvar args = arguments;\n\tgetOverload(arguments).split(',').forEach(function(type, offset) {\n\t\tswitch (type) {\n\t\t\tcase '': // Blank arguments - do nothing\n\t\t\t\t// Pass\n\t\t\t\tbreak;\n\t\t\tcase 'string':\n\t\t\t\tpayload.push(args[offset]);\n\t\t\t\tbreak;\n\t\t\tcase 'array':\n\t\t\t\tpayload.concat(args[offset]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown argument type passed to .await(): ' + type);\n\t\t}\n\t});\n\t// }}}\n\n\tthis._struct.push({ type: 'await', payload: payload });\n\n\treturn this;\n};\n\n\n/**\n* Queue up a limit setter\n* @param int|null|false Either the number of defer processes that are allowed to execute simultaniously or falsy values to disable\n* @return object This chainable object\n*/\nfunction setLimit(setLimit) {\n\tthis._struct.push({ type: 'limit', payload: setLimit });\n\treturn this;\n};\n\n\n/**\n* Queue up a context setter\n* @param object newContext The new context to pass to all subsequent functions via `this`\n* @return object This chainable object\n*/\nfunction setContext(newContext) {\n\tthis._struct.push({ type: 'context', payload: newContext });\n\treturn this;\n};\n\n\n/**\n* Queue up a varable setter (i.e. set a hash of variables in context)\n* @param string The named key to set\n* @param mixed The value to set\n* @return object This chainable object\n*/\nfunction set() {\n\tvar calledAs = getOverload(arguments);\n\tswitch(calledAs) {\n\t\tcase '':\n\t\t\t// Pass\n\t\t\tbreak;\n\t\tcase 'string,string': // Form: set(String <key>, String <value>)\n\t\tcase 'string,number': // Form: set(String <key>, Number <value>)\n\t\tcase 'string,boolean': // Form: set(String <key>, Boolean <value>)\n\t\tcase 'string,array': // Form: set(String <key>, Array <value>)\n\t\tcase 'string,collection': // Form: set(String <key>, Collection <value>)\n\t\tcase 'string,object': // Form: set(String <key>, Object <value>)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[0]] = arguments[1];\n\t\t\tthis._struct.push({ type: 'set', payload: payload });\n\t\t\tbreak;\n\t\tcase 'object': // Form: set(Object)\n\t\t\tthis._struct.push({ type: 'set', payload: arguments[0] });\n\t\t\tbreak;\n\t\tcase 'function': // Form: set(func) -> series(func)\n\t\t\tthis._struct.push({ type: 'seriesArray', payload: [arguments[0]] });\n\t\t\tbreak;\n\t\tcase  'string,function': // Form: set(String, func) -> series(String <id>, func)\n\t\t\tvar payload = {};\n\t\t\tpayload[arguments[0]] = arguments[1];\n\t\t\tthis._struct.push({ type: 'seriesObject', payload: payload});\n\t\t\tbreak;\n\t\tcase 'string': // Set to undefined\n\t\t\tthis._setRaw(arguments[0], undefined);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .set():' + calledAs);\n\t}\n\n\treturn this;\n};\n\n\n/**\n* Set a context items value\n* Not to be confused with `set()` which is the chainable external visible version of this\n* Unlike `set()` this function sets an item of _context immediately\n* @access private\n* @see _setRaw()\n*/\nfunction _set() {\n\tvar calledAs = getOverload(arguments);\n\tswitch(calledAs) {\n\t\tcase '':\n\t\t\t// Pass\n\t\t\tbreak;\n\t\tcase 'string,string': // Form: set(String <key>, String <value>)\n\t\tcase 'string,number': // Form: set(String <key>, Number <value>)\n\t\tcase 'string,boolean': // Form: set(String <key>, Boolean <value>)\n\t\tcase 'string,array': // Form: set(String <key>, Array <value>)\n\t\tcase 'string,collection': // Form: set(String <key>, Collection <value>)\n\t\tcase 'string,object': // Form: set(String <key>, Object <value>)\n\t\t\tthis._setRaw(arguments[0], arguments[1]);\n\t\t\tbreak;\n\t\tcase 'object': // Form: set(Object)\n\t\t\tfor (var key in arguments[0])\n\t\t\t\tthis._setRaw(key, arguments[0][key]);\n\t\t\tbreak;\n\t\tcase  'string,function': // Form: set(String, func) -> series(String <id>, func)\n\t\t\tthis._setRaw(arguments[0], arguments[1].call(this));\n\t\t\tbreak;\n\t\tcase 'function': // Form: _set(func) // Expect func to return something which is then processed to _set\n\t\t\tthis._set(arguments[1].call(this));\n\t\t\tbreak;\n\t\tcase 'string': // Set to undefined\n\t\t\tthis._setRaw(arguments[0], undefined);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .set():' + calledAs);\n\t}\n\n\treturn this;\n}\n\n\n/**\n* Actual raw value setter\n* This function is the internal version of _set which takes exactly two values, the key and the value to set\n* Override this function if some alternative _context platform is required\n* @param string key The key within _context to set the value of\n* @param mixed value The value within _context[key] to set the value of\n* @access private\n*/\nfunction _setRaw(key, value) {\n\tthis._context[key] = value;\n\treturn this;\n}\n\n\n/**\n* Internal function executed at the end of the chain\n* This can occur either in sequence (i.e. no errors) or a jump to this position (i.e. an error happened somewhere)\n* @access private\n*/\nfunction _finalize(err) {\n\t// Sanity checks {{{\n\tif (this._struct.length == 0) return; // Finalize called on dead object - probably a defer() fired without an await()\n\tif (this._struct[this._struct.length - 1].type != 'end') {\n\t\tthrow new Error('While trying to find an end point in the async-chainable structure the last item in the this._struct does not have type==end!');\n\t\treturn;\n\t}\n\t// }}}\n\tthis._struct[this._struct.length-1].payload.call(this._options.context, err);\n\tif (this._options.autoReset)\n\t\tthis.reset();\n};\n\n\n/**\n* Internal function to execute the next pending queue item\n* This is usually called after the completion of every async.series() / async.parallel() / asyncChainable._run call\n* @access private\n*/\nfunction _execute(err) {\n\tvar self = this;\n\tif (err) return this._finalize(err); // An error has been raised - stop exec and call finalize now\n\tdo {\n\t\tvar redo = false;\n\t\tif (self._structPointer >= self._struct.length) return this._finalize(err); // Nothing more to execute in struct\n\t\tself._deferCheck(); // Kick off any pending deferred items\n\t\tvar currentExec = self._struct[self._structPointer];\n\t\t// Sanity checks {{{\n\t\tif (!currentExec.type) {\n\t\t\tthrow new Error('No type is specified for async-chainable structure at offset ' + self._structPointer);\n\t\t\treturn self;\n\t\t}\n\t\t// }}}\n\t\tself._structPointer++;\n\n\t\t// Skip step when function supports skipping if the argument is empty {{{\n\t\tif (\n\t\t\t[\n\t\t\t\t'parallelArray', 'parallelObject', 'parallelCollection',\n\t\t\t\t'forEachArray', 'forEachObject',\n\t\t\t\t'seriesArray', 'seriesObject', 'seriesCollection',\n\t\t\t\t'deferArray', 'deferObject', 'deferCollection',\n\t\t\t\t'set'\n\t\t\t].indexOf(currentExec.type) > -1 &&\n\t\t\t(\n\t\t\t\t!currentExec.payload || // Not set OR\n\t\t\t\t(isArray(currentExec.payload) && !currentExec.payload.length) || // An empty array\n\t\t\t\t(isObject(currentExec.payload) && !Object.keys(currentExec.payload).length) // An empty object\n\t\t\t)\n\t\t) {\n\t\t\tcurrentExec.completed = true;\n\t\t\tredo = true;\n\t\t\tcontinue;\n\t\t}\n\t\t// }}}\n\n\t\tswitch (currentExec.type) {\n\t\t\tcase 'parallelArray':\n\t\t\t\tself._run(currentExec.payload.map(function(task) {\n\t\t\t\t\treturn function(next) {\n\t\t\t\t\t\ttask.call(self._options.context, next);\n\t\t\t\t\t};\n\t\t\t\t}), self._options.limit, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'parallelObject':\n\t\t\t\tvar tasks = [];\n\t\t\t\tObject.keys(currentExec.payload).forEach(function(key) {\n\t\t\t\t\ttasks.push(function(next) {\n\t\t\t\t\t\tcurrentExec.payload[key].call(self._options.context, function(err, value) {\n\t\t\t\t\t\t\tself._set(key, value); // Allocate returned value to context\n\t\t\t\t\t\t\tnext(err);\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tself._run(tasks, self._options.limit, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'parallelCollection':\n\t\t\t\tvar tasks = [];\n\t\t\t\tcurrentExec.payload.forEach(function(task) {\n\t\t\t\t\tObject.keys(task).forEach(function(key) {\n\t\t\t\t\t\ttasks.push(function(next, err) {\n\t\t\t\t\t\t\tif (typeof task[key] != 'function') throw new Error('Collection item for parallel exec is not a function', currentExec.payload);\n\t\t\t\t\t\t\ttask[key].call(self._options.context, function(err, value) {\n\t\t\t\t\t\t\t\tself._set(key, value); // Allocate returned value to context\n\t\t\t\t\t\t\t\tnext(err);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tself._run(tasks, self._options.limit, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'forEachArray':\n\t\t\t\tself._run(currentExec.payload.map(function(item, iter) {\n\t\t\t\t\tself._context._item = item;\n\t\t\t\t\tself._context._key = iter;\n\t\t\t\t\treturn function(next) {\n\t\t\t\t\t\tcurrentExec.callback.call(self._options.context, next, item, iter);\n\t\t\t\t\t};\n\t\t\t\t}), self._options.limit, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'forEachObject':\n\t\t\t\tvar tasks = [];\n\t\t\t\tObject.keys(currentExec.payload).forEach(function(key) {\n\t\t\t\t\ttasks.push(function(next) {\n\t\t\t\t\t\tself._context._item = currentExec.payload[key];\n\t\t\t\t\t\tself._context._key = key;\n\t\t\t\t\t\tcurrentExec.callback.call(self._options.context, function(err, value) {\n\t\t\t\t\t\t\tself._set(key, value); // Allocate returned value to context\n\t\t\t\t\t\t\tnext(err);\n\t\t\t\t\t\t}, currentExec.payload[key], key);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tself._run(tasks, self._options.limit, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'forEachLateBound':\n\t\t\t\tif (\n\t\t\t\t\t(!currentExec.payload || !currentExec.payload.length) || // Payload is blank\n\t\t\t\t\t(!self._context[currentExec.payload]) // Payload doesnt exist within context\n\t\t\t\t) { // Goto next chain\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tredo = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Replace own exec array with actual type of payload now we know what it is {{{\n\t\t\t\tvar overloadType = getOverload([self._context[currentExec.payload]]);\n\t\t\t\tswitch (overloadType) {\n\t\t\t\t\tcase 'collection':\n\t\t\t\t\tcase 'array':\n\t\t\t\t\t\tcurrentExec.type = 'forEachArray';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'object':\n\t\t\t\t\t\tcurrentExec.type = 'forEachObject';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Cannot perform forEach over unknown object type: ' + overloadType);\n\t\t\t\t}\n\t\t\t\tcurrentExec.payload = self._context[currentExec.payload];\n\t\t\t\tself._structPointer--; // Force re-eval of this chain item now its been replace with its real (late-bound) type\n\t\t\t\tredo = true;\n\t\t\t\t// }}}\n\t\t\t\tbreak;\n\t\t\tcase 'seriesArray':\n\t\t\t\tself._run(currentExec.payload.map(function(task) {\n\t\t\t\t\treturn function(next) {\n\t\t\t\t\t\ttask.call(self._options.context, next);\n\t\t\t\t\t};\n\t\t\t\t}), 1, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'seriesObject':\n\t\t\t\tvar tasks = [];\n\t\t\t\tObject.keys(currentExec.payload).forEach(function(key) {\n\t\t\t\t\ttasks.push(function(next) {\n\t\t\t\t\t\tcurrentExec.payload[key].call(self._options.context, function(err, value) {\n\t\t\t\t\t\t\tself._set(key, value); // Allocate returned value to context\n\t\t\t\t\t\t\tnext(err);\n\t\t\t\t\t\t})\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tself._run(tasks, 1, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'seriesCollection':\n\t\t\t\tvar tasks = [];\n\t\t\t\tcurrentExec.payload.forEach(function(task) {\n\t\t\t\t\tObject.keys(task).forEach(function(key) {\n\t\t\t\t\t\ttasks.push(function(next, err) {\n\t\t\t\t\t\t\tif (typeof task[key] != 'function') throw new Error('Collection item for series exec is not a function', currentExec.payload);\n\t\t\t\t\t\t\ttask[key].call(self._options.context, function(err, value) {\n\t\t\t\t\t\t\t\tself._set(key, value); // Allocate returned value to context\n\t\t\t\t\t\t\t\tnext(err);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tself._run(tasks, 1, function(err) {\n\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\tself._execute(err);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'deferArray':\n\t\t\t\tcurrentExec.payload.forEach(function(task) {\n\t\t\t\t\tself._deferAdd(null, task, currentExec);\n\t\t\t\t});\n\n\t\t\t\tredo = true;\n\t\t\t\tbreak;\n\t\t\tcase 'deferObject':\n\t\t\t\tObject.keys(currentExec.payload).forEach(function(key) {\n\t\t\t\t\tself._deferAdd(key, currentExec.payload[key], currentExec);\n\t\t\t\t});\n\n\t\t\t\tredo = true;\n\t\t\t\tbreak;\n\t\t\tcase 'deferCollection':\n\t\t\t\tcurrentExec.payload.forEach(function(task) {\n\t\t\t\t\tObject.keys(task).forEach(function(key) {\n\t\t\t\t\t\tself._deferAdd(key, task[key], currentExec);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tredo = true;\n\t\t\t\tbreak;\n\t\t\tcase 'await': // Await can operate in two modes, either payload=[] (examine all) else (examine specific keys)\n\t\t\t\tif (!currentExec.payload.length) { // Check all tasks are complete\n\t\t\t\t\tif (self._struct.slice(0, self._structPointer - 1).every(function(stage) { // Examine all items UP TO self one and check they are complete\n\t\t\t\t\t\treturn stage.completed;\n\t\t\t\t\t})) { // All tasks up to self point are marked as completed\n\t\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\t\tredo = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself._structPointer--; // At least one task is outstanding - rewind to self stage so we repeat on next resolution\n\t\t\t\t\t}\n\t\t\t\t} else { // Check certain tasks are complete by key\n\t\t\t\t\tif (currentExec.payload.every(function(dep) { // Examine all named dependencies\n\t\t\t\t\t\treturn !! self._context[dep];\n\t\t\t\t\t})) { // All are present\n\t\t\t\t\t\tcurrentExec.completed = true;\n\t\t\t\t\t\tredo = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself._structPointer--; // At least one dependency is outstanding - rewind to self stage so we repeat on next resolution\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'limit': // Set the options.limit variable\n\t\t\t\tself._options.limit = currentExec.payload;\n\t\t\t\tcurrentExec.completed = true;\n\t\t\t\tredo = true; // Move on to next action\n\t\t\t\tbreak;\n\t\t\tcase 'context': // Change the self._options.context object\n\t\t\t\tself._options.context = currentExec.payload ? currentExec.payload : self._context; // Set context (if null use internal context)\n\t\t\t\tcurrentExec.completed = true;\n\t\t\t\tredo = true; // Move on to next action\n\t\t\t\tbreak;\n\t\t\tcase 'set': // Set a hash of variables within context\n\t\t\t\tObject.keys(currentExec.payload).forEach(function(key) {\n\t\t\t\t\tself._set(key, currentExec.payload[key]);\n\t\t\t\t});\n\t\t\t\tcurrentExec.completed = true;\n\t\t\t\tredo = true; // Move on to next action\n\t\t\t\tbreak;\n\t\t\tcase 'end': // self should ALWAYS be the last item in the structure and indicates the final function call\n\t\t\t\tthis._finalize();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this._plugins[currentExec.type]) { // Is there a plugin that should manage this?\n\t\t\t\t\tthis._plugins[currentExec.type].call(this, currentExec);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('Unknown async-chainable exec type: ' + currentExec.type);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t}\n\t} while (redo);\n};\n\n\n/**\n* Internal function to run an array of functions (usually in parallel)\n* Series execution can be obtained by setting limit = 1\n* @param array tasks The array of tasks to execute\n* @param int limit The limiter of tasks (if limit==1 tasks are run in series, if limit>1 tasks are run in limited parallel, else tasks are run in parallel)\n* @param function callback(err) The callback to fire on finish\n*/\nfunction _run(tasks, limit, callback) {\n\tif (limit == 1) {\n\t\tasync.series(tasks, callback);\n\t} else if (limit > 0) {\n\t\tasync.parallelLimit(tasks, limit, callback);\n\t} else {\n\t\tasync.parallel(tasks, callback);\n\t}\n}\n\n\n/**\n* Reset all state variables and return the object into a pristine condition\n* @return object This chainable object\n*/\nfunction reset() {\n\tthis._struct = [];\n\tthis._structPointer = 0;\n\n\tvar reAttachContext = (this._options.context == this._context); // Reattach the context pointer after reset?\n\tthis._context = {\n\t\t_struct: this._struct,\n\t\t_structPointer: this._structPointer,\n\t\t_options: this._options,\n\t\t_deferredRunning: this._deferredRunning,\n\t};\n\n\tif (reAttachContext) this._options.context = this._context;\n};\n\n/**\n* Queue up an optional single function for execution on completion\n* This function also starts the queue executing\n* @return object This chainable object\n*/\nfunction end() { \n\tvar calledAs = getOverload(arguments);\n\tswitch (calledAs) {\n\t\tcase '': // No functions passed - do nothing\n\t\t\tthis._struct.push({ type: 'end', payload: function() {} }); // .end() called with no args - make a noop()\n\t\t\tbreak;\n\t\tcase 'function': // Form: end(func) -> redirect as if called with series(func)\n\t\t\tthis._struct.push({ type: 'end', payload: arguments[0] });\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown call style for .end(): ' + calledAs);\n\t}\n\n\tthis._execute();\n\treturn this;\n};\n\nvar objectInstance = function() {\n\t// Variables {{{\n\tthis._struct = [];\n\tthis._structPointer = 0;\n\tthis._context = {};\n\n\tthis._options = {\n\t\tautoReset: true, // Run asyncChainable.reset() after finalize. Disable this if you want to see a post-mortem on what did run\n\t\tlimit: 10, // Number of defer functions that are allowed to execute at once\n\t\tcontext: this._context, // The context item passed to the functions (can be changed with .context())\n\t};\n\t// }}}\n\n\t// Async-Chainable functions {{{\n\t// Private {{{\n\tthis._execute = _execute;\n\tthis._run = _run;\n\tthis._deferCheck = _deferCheck;\n\tthis._deferAdd = deferAdd;\n\tthis._deferred = [];\n\tthis._deferredRunning = 0;\n\tthis._finalize = _finalize;\n\tthis._getOverload = getOverload; // So this function is accessible by plugins\n\tthis._plugins = _plugins;\n\t// }}}\n\n\tthis.await = await;\n\tthis.context = setContext;\n\tthis.defer = defer;\n\tthis.end = end;\n\tthis.forEach = forEach;\n\tthis.limit = setLimit;\n\tthis.parallel = parallel;\n\tthis.reset = reset;\n\tthis.series = series;\n\tthis.set = set;\n\tthis._set = _set;\n\tthis._setRaw = _setRaw;\n\tthis.then = series;\n\tthis.new = function() { return new objectInstance };\n\tthis.use = use;\n\t// }}}\n\n\t// Async compat functionality - so this module becomes a drop-in replacement {{{\n\t// Collections\n\tthis.each = async.each;\n\tthis.eachSeries = async.eachSeries;\n\tthis.eachLimit = async.eachLimit;\n\tthis.map = async.map;\n\tthis.mapSeries = async.mapSeries;\n\tthis.mapLimit = async.mapLimit;\n\tthis.filter = async.filter;\n\tthis.filterSeries = async.filterSeries;\n\tthis.reject = async.reject;\n\tthis.rejectSeries = async.rejectSeries;\n\tthis.reduce = async.reduce;\n\tthis.reduceRight = async.reduceRight;\n\tthis.detect = async.detect;\n\tthis.detectSeries = async.detectSeries;\n\tthis.sortBy = async.sortBy;\n\tthis.some = async.some;\n\tthis.every = async.every;\n\tthis.concat = async.concat;\n\tthis.concatSeries = async.concatSeries;\n\n\t// Control Flow\n\t// See main .series() and .parallel() code for async compatibility\n\tthis.parallelLimit = async.parallelLimit;\n\tthis.whilst = async.whilst;\n\tthis.doWhilst = async.doWhilst;\n\tthis.until = async.until;\n\tthis.doUntil = async.doUntil;\n\tthis.forever = async.forever;\n\tthis.waterfall = async.waterfall;\n\tthis.compose = async.compose;\n\tthis.seq = async.seq;\n\tthis.applyEach = async.applyEach;\n\tthis.applyEachSeries = async.applyEachSeries;\n\tthis.queue = async.queue;\n\tthis.priorityQueue = async.priorityQueue;\n\tthis.cargo = async.cargo;\n\tthis.auto = async.auto;\n\tthis.retry = async.retry;\n\tthis.iterator = async.iterator;\n\tthis.apply = async.apply;\n\tthis.nextTick = async.nextTick;\n\tthis.times = async.times;\n\tthis.timesSeries = async.timesSeries;\n\tthis.Utils = async.Utils;\n\n\t// Utils\n\tthis.memoize = async.memoize;\n\tthis.unmemoize = async.unmemoize;\n\tthis.log = async.log;\n\tthis.dir = async.dir;\n\tthis.noConflict = async.noConflict;\n\t// }}}\n\n\tthis.reset();\n\treturn this;\n}\n\n// Return the output object\nmodule.exports = function asyncChainable() {\n\treturn new objectInstance;\n};\n\n},{\"async\":3}],3:[function(require,module,exports){\n(function (process,global){\n/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n(function () {\n\n    var async = {};\n    function noop() {}\n    function identity(v) {\n        return v;\n    }\n    function toBool(v) {\n        return !!v;\n    }\n    function notId(v) {\n        return !v;\n    }\n\n    // global on the server, window in the browser\n    var previous_async;\n\n    // Establish the root object, `window` (`self`) in the browser, `global`\n    // on the server, or `this` in some virtual machines. We use `self`\n    // instead of `window` for `WebWorker` support.\n    var root = typeof self === 'object' && self.self === self && self ||\n            typeof global === 'object' && global.global === global && global ||\n            this;\n\n    if (root != null) {\n        previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        return function() {\n            if (fn === null) throw new Error(\"Callback was already called.\");\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    function _once(fn) {\n        return function() {\n            if (fn === null) return;\n            fn.apply(this, arguments);\n            fn = null;\n        };\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    // Ported from underscore.js isObject\n    var _isObject = function(obj) {\n        var type = typeof obj;\n        return type === 'function' || type === 'object' && !!obj;\n    };\n\n    function _isArrayLike(arr) {\n        return _isArray(arr) || (\n            // has a positive integer length property\n            typeof arr.length === \"number\" &&\n            arr.length >= 0 &&\n            arr.length % 1 === 0\n        );\n    }\n\n    function _arrayEach(arr, iterator) {\n        var index = -1,\n            length = arr.length;\n\n        while (++index < length) {\n            iterator(arr[index], index, arr);\n        }\n    }\n\n    function _map(arr, iterator) {\n        var index = -1,\n            length = arr.length,\n            result = Array(length);\n\n        while (++index < length) {\n            result[index] = iterator(arr[index], index, arr);\n        }\n        return result;\n    }\n\n    function _range(count) {\n        return _map(Array(count), function (v, i) { return i; });\n    }\n\n    function _reduce(arr, iterator, memo) {\n        _arrayEach(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    }\n\n    function _forEachOf(object, iterator) {\n        _arrayEach(_keys(object), function (key) {\n            iterator(object[key], key);\n        });\n    }\n\n    function _indexOf(arr, item) {\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] === item) return i;\n        }\n        return -1;\n    }\n\n    var _keys = Object.keys || function (obj) {\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    function _keyIterator(coll) {\n        var i = -1;\n        var len;\n        var keys;\n        if (_isArrayLike(coll)) {\n            len = coll.length;\n            return function next() {\n                i++;\n                return i < len ? i : null;\n            };\n        } else {\n            keys = _keys(coll);\n            len = keys.length;\n            return function next() {\n                i++;\n                return i < len ? keys[i] : null;\n            };\n        }\n    }\n\n    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)\n    // This accumulates the arguments passed into an array, after a given index.\n    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).\n    function _restParam(func, startIndex) {\n        startIndex = startIndex == null ? func.length - 1 : +startIndex;\n        return function() {\n            var length = Math.max(arguments.length - startIndex, 0);\n            var rest = Array(length);\n            for (var index = 0; index < length; index++) {\n                rest[index] = arguments[index + startIndex];\n            }\n            switch (startIndex) {\n                case 0: return func.call(this, rest);\n                case 1: return func.call(this, arguments[0], rest);\n            }\n            // Currently unused but handle cases outside of the switch statement:\n            // var args = Array(startIndex + 1);\n            // for (index = 0; index < startIndex; index++) {\n            //     args[index] = arguments[index];\n            // }\n            // args[startIndex] = rest;\n            // return func.apply(this, args);\n        };\n    }\n\n    function _withoutIndex(iterator) {\n        return function (value, index, callback) {\n            return iterator(value, callback);\n        };\n    }\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n\n    // capture the global reference to guard against fakeTimer mocks\n    var _setImmediate = typeof setImmediate === 'function' && setImmediate;\n\n    var _delay = _setImmediate ? function(fn) {\n        // not a direct alias for IE10 compatibility\n        _setImmediate(fn);\n    } : function(fn) {\n        setTimeout(fn, 0);\n    };\n\n    if (typeof process === 'object' && typeof process.nextTick === 'function') {\n        async.nextTick = process.nextTick;\n    } else {\n        async.nextTick = _delay;\n    }\n    async.setImmediate = _setImmediate ? _delay : async.nextTick;\n\n\n    async.forEach =\n    async.each = function (arr, iterator, callback) {\n        return async.eachOf(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachSeries =\n    async.eachSeries = function (arr, iterator, callback) {\n        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);\n    };\n\n\n    async.forEachLimit =\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);\n    };\n\n    async.forEachOf =\n    async.eachOf = function (object, iterator, callback) {\n        callback = _once(callback || noop);\n        object = object || [];\n\n        var iter = _keyIterator(object);\n        var key, completed = 0;\n\n        while ((key = iter()) != null) {\n            completed += 1;\n            iterator(object[key], key, only_once(done));\n        }\n\n        if (completed === 0) callback(null);\n\n        function done(err) {\n            completed--;\n            if (err) {\n                callback(err);\n            }\n            // Check key is null in case iterator isn't exhausted\n            // and done resolved synchronously.\n            else if (key === null && completed <= 0) {\n                callback(null);\n            }\n        }\n    };\n\n    async.forEachOfSeries =\n    async.eachOfSeries = function (obj, iterator, callback) {\n        callback = _once(callback || noop);\n        obj = obj || [];\n        var nextKey = _keyIterator(obj);\n        var key = nextKey();\n        function iterate() {\n            var sync = true;\n            if (key === null) {\n                return callback(null);\n            }\n            iterator(obj[key], key, only_once(function (err) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    key = nextKey();\n                    if (key === null) {\n                        return callback(null);\n                    } else {\n                        if (sync) {\n                            async.setImmediate(iterate);\n                        } else {\n                            iterate();\n                        }\n                    }\n                }\n            }));\n            sync = false;\n        }\n        iterate();\n    };\n\n\n\n    async.forEachOfLimit =\n    async.eachOfLimit = function (obj, limit, iterator, callback) {\n        _eachOfLimit(limit)(obj, iterator, callback);\n    };\n\n    function _eachOfLimit(limit) {\n\n        return function (obj, iterator, callback) {\n            callback = _once(callback || noop);\n            obj = obj || [];\n            var nextKey = _keyIterator(obj);\n            if (limit <= 0) {\n                return callback(null);\n            }\n            var done = false;\n            var running = 0;\n            var errored = false;\n\n            (function replenish () {\n                if (done && running <= 0) {\n                    return callback(null);\n                }\n\n                while (running < limit && !errored) {\n                    var key = nextKey();\n                    if (key === null) {\n                        done = true;\n                        if (running <= 0) {\n                            callback(null);\n                        }\n                        return;\n                    }\n                    running += 1;\n                    iterator(obj[key], key, only_once(function (err) {\n                        running -= 1;\n                        if (err) {\n                            callback(err);\n                            errored = true;\n                        }\n                        else {\n                            replenish();\n                        }\n                    }));\n                }\n            })();\n        };\n    }\n\n\n    function doParallel(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOf, obj, iterator, callback);\n        };\n    }\n    function doParallelLimit(fn) {\n        return function (obj, limit, iterator, callback) {\n            return fn(_eachOfLimit(limit), obj, iterator, callback);\n        };\n    }\n    function doSeries(fn) {\n        return function (obj, iterator, callback) {\n            return fn(async.eachOfSeries, obj, iterator, callback);\n        };\n    }\n\n    function _asyncMap(eachfn, arr, iterator, callback) {\n        callback = _once(callback || noop);\n        arr = arr || [];\n        var results = _isArrayLike(arr) ? [] : {};\n        eachfn(arr, function (value, index, callback) {\n            iterator(value, function (err, v) {\n                results[index] = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = doParallelLimit(_asyncMap);\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.inject =\n    async.foldl =\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachOfSeries(arr, function (x, i, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n\n    async.foldr =\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, identity).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n\n    async.transform = function (arr, memo, iterator, callback) {\n        if (arguments.length === 3) {\n            callback = iterator;\n            iterator = memo;\n            memo = _isArray(arr) ? [] : {};\n        }\n\n        async.eachOf(arr, function(v, k, cb) {\n            iterator(memo, v, k, cb);\n        }, function(err) {\n            callback(err, memo);\n        });\n    };\n\n    function _filter(eachfn, arr, iterator, callback) {\n        var results = [];\n        eachfn(arr, function (x, index, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    results.push({index: index, value: x});\n                }\n                callback();\n            });\n        }, function () {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    }\n\n    async.select =\n    async.filter = doParallel(_filter);\n\n    async.selectLimit =\n    async.filterLimit = doParallelLimit(_filter);\n\n    async.selectSeries =\n    async.filterSeries = doSeries(_filter);\n\n    function _reject(eachfn, arr, iterator, callback) {\n        _filter(eachfn, arr, function(value, cb) {\n            iterator(value, function(v) {\n                cb(!v);\n            });\n        }, callback);\n    }\n    async.reject = doParallel(_reject);\n    async.rejectLimit = doParallelLimit(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    function _createTester(eachfn, check, getResult) {\n        return function(arr, limit, iterator, cb) {\n            function done() {\n                if (cb) cb(getResult(false, void 0));\n            }\n            function iteratee(x, _, callback) {\n                if (!cb) return callback();\n                iterator(x, function (v) {\n                    if (cb && check(v)) {\n                        cb(getResult(true, x));\n                        cb = iterator = false;\n                    }\n                    callback();\n                });\n            }\n            if (arguments.length > 3) {\n                eachfn(arr, limit, iteratee, done);\n            } else {\n                cb = iterator;\n                iterator = limit;\n                eachfn(arr, iteratee, done);\n            }\n        };\n    }\n\n    async.any =\n    async.some = _createTester(async.eachOf, toBool, identity);\n\n    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);\n\n    async.all =\n    async.every = _createTester(async.eachOf, notId, notId);\n\n    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);\n\n    function _findGetResult(v, x) {\n        return x;\n    }\n    async.detect = _createTester(async.eachOf, identity, _findGetResult);\n    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);\n    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                callback(null, _map(results.sort(comparator), function (x) {\n                    return x.value;\n                }));\n            }\n\n        });\n\n        function comparator(left, right) {\n            var a = left.criteria, b = right.criteria;\n            return a < b ? -1 : a > b ? 1 : 0;\n        }\n    };\n\n    async.auto = function (tasks, concurrency, callback) {\n        if (typeof arguments[1] === 'function') {\n            // concurrency is optional, shift the args.\n            callback = concurrency;\n            concurrency = null;\n        }\n        callback = _once(callback || noop);\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length;\n        if (!remainingTasks) {\n            return callback(null);\n        }\n        if (!concurrency) {\n            concurrency = remainingTasks;\n        }\n\n        var results = {};\n        var runningTasks = 0;\n\n        var hasError = false;\n\n        var listeners = [];\n        function addListener(fn) {\n            listeners.unshift(fn);\n        }\n        function removeListener(fn) {\n            var idx = _indexOf(listeners, fn);\n            if (idx >= 0) listeners.splice(idx, 1);\n        }\n        function taskComplete() {\n            remainingTasks--;\n            _arrayEach(listeners.slice(0), function (fn) {\n                fn();\n            });\n        }\n\n        addListener(function () {\n            if (!remainingTasks) {\n                callback(null, results);\n            }\n        });\n\n        _arrayEach(keys, function (k) {\n            if (hasError) return;\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = _restParam(function(err, args) {\n                runningTasks--;\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _forEachOf(results, function(val, rkey) {\n                        safeResults[rkey] = val;\n                    });\n                    safeResults[k] = args;\n                    hasError = true;\n\n                    callback(err, safeResults);\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            });\n            var requires = task.slice(0, task.length - 1);\n            // prevent dead-locks\n            var len = requires.length;\n            var dep;\n            while (len--) {\n                if (!(dep = tasks[requires[len]])) {\n                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));\n                }\n                if (_isArray(dep) && _indexOf(dep, k) >= 0) {\n                    throw new Error('Has cyclic dependencies');\n                }\n            }\n            function ready() {\n                return runningTasks < concurrency && _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            }\n            if (ready()) {\n                runningTasks++;\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                addListener(listener);\n            }\n            function listener() {\n                if (ready()) {\n                    runningTasks++;\n                    removeListener(listener);\n                    task[task.length - 1](taskCallback, results);\n                }\n            }\n        });\n    };\n\n\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var DEFAULT_INTERVAL = 0;\n\n        var attempts = [];\n\n        var opts = {\n            times: DEFAULT_TIMES,\n            interval: DEFAULT_INTERVAL\n        };\n\n        function parseTimes(acc, t){\n            if(typeof t === 'number'){\n                acc.times = parseInt(t, 10) || DEFAULT_TIMES;\n            } else if(typeof t === 'object'){\n                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;\n                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;\n            } else {\n                throw new Error('Unsupported argument type for \\'times\\': ' + typeof t);\n            }\n        }\n\n        var length = arguments.length;\n        if (length < 1 || length > 3) {\n            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');\n        } else if (length <= 2 && typeof times === 'function') {\n            callback = task;\n            task = times;\n        }\n        if (typeof times !== 'function') {\n            parseTimes(opts, times);\n        }\n        opts.callback = callback;\n        opts.task = task;\n\n        function wrappedTask(wrappedCallback, wrappedResults) {\n            function retryAttempt(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            }\n\n            function retryInterval(interval){\n                return function(seriesCallback){\n                    setTimeout(function(){\n                        seriesCallback(null);\n                    }, interval);\n                };\n            }\n\n            while (opts.times) {\n\n                var finalAttempt = !(opts.times-=1);\n                attempts.push(retryAttempt(opts.task, finalAttempt));\n                if(!finalAttempt && opts.interval > 0){\n                    attempts.push(retryInterval(opts.interval));\n                }\n            }\n\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || opts.callback)(data.err, data.result);\n            });\n        }\n\n        // If a callback is passed, run this as a controll flow\n        return opts.callback ? wrappedTask() : wrappedTask;\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = _once(callback || noop);\n        if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        function wrapIterator(iterator) {\n            return _restParam(function (err, args) {\n                if (err) {\n                    callback.apply(null, [err].concat(args));\n                }\n                else {\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    ensureAsync(iterator).apply(null, args);\n                }\n            });\n        }\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    function _parallel(eachfn, tasks, callback) {\n        callback = callback || noop;\n        var results = _isArrayLike(tasks) ? [] : {};\n\n        eachfn(tasks, function (task, key, callback) {\n            task(_restParam(function (err, args) {\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                results[key] = args;\n                callback(err);\n            }));\n        }, function (err) {\n            callback(err, results);\n        });\n    }\n\n    async.parallel = function (tasks, callback) {\n        _parallel(async.eachOf, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel(_eachOfLimit(limit), tasks, callback);\n    };\n\n    async.series = function(tasks, callback) {\n        _parallel(async.eachOfSeries, tasks, callback);\n    };\n\n    async.iterator = function (tasks) {\n        function makeCallback(index) {\n            function fn() {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            }\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        }\n        return makeCallback(0);\n    };\n\n    async.apply = _restParam(function (fn, args) {\n        return _restParam(function (callArgs) {\n            return fn.apply(\n                null, args.concat(callArgs)\n            );\n        });\n    });\n\n    function _concat(eachfn, arr, fn, callback) {\n        var result = [];\n        eachfn(arr, function (x, index, cb) {\n            fn(x, function (err, y) {\n                result = result.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, result);\n        });\n    }\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        callback = callback || noop;\n        if (test()) {\n            var next = _restParam(function(err, args) {\n                if (err) {\n                    callback(err);\n                } else if (test.apply(this, args)) {\n                    iterator(next);\n                } else {\n                    callback.apply(null, [null].concat(args));\n                }\n            });\n            iterator(next);\n        } else {\n            callback(null);\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        var calls = 0;\n        return async.whilst(function() {\n            return ++calls <= 1 || test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.until = function (test, iterator, callback) {\n        return async.whilst(function() {\n            return !test.apply(this, arguments);\n        }, iterator, callback);\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        return async.doWhilst(iterator, function() {\n            return !test.apply(this, arguments);\n        }, callback);\n    };\n\n    async.during = function (test, iterator, callback) {\n        callback = callback || noop;\n\n        var next = _restParam(function(err, args) {\n            if (err) {\n                callback(err);\n            } else {\n                args.push(check);\n                test.apply(this, args);\n            }\n        });\n\n        var check = function(err, truth) {\n            if (err) {\n                callback(err);\n            } else if (truth) {\n                iterator(next);\n            } else {\n                callback(null);\n            }\n        };\n\n        test(check);\n    };\n\n    async.doDuring = function (iterator, test, callback) {\n        var calls = 0;\n        async.during(function(next) {\n            if (calls++ < 1) {\n                next(null, true);\n            } else {\n                test.apply(this, arguments);\n            }\n        }, iterator, callback);\n    };\n\n    function _queue(worker, concurrency, payload) {\n        if (concurrency == null) {\n            concurrency = 1;\n        }\n        else if(concurrency === 0) {\n            throw new Error('Concurrency must not be zero');\n        }\n        function _insert(q, data, pos, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0 && q.idle()) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    callback: callback || noop\n                };\n\n                if (pos) {\n                    q.tasks.unshift(item);\n                } else {\n                    q.tasks.push(item);\n                }\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n            });\n            async.setImmediate(q.process);\n        }\n        function _next(q, tasks) {\n            return function(){\n                workers -= 1;\n\n                var removed = false;\n                var args = arguments;\n                _arrayEach(tasks, function (task) {\n                    _arrayEach(workersList, function (worker, index) {\n                        if (worker === task && !removed) {\n                            workersList.splice(index, 1);\n                            removed = true;\n                        }\n                    });\n\n                    task.callback.apply(task, args);\n                });\n                if (q.tasks.length + workers === 0) {\n                    q.drain();\n                }\n                q.process();\n            };\n        }\n\n        var workers = 0;\n        var workersList = [];\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            payload: payload,\n            saturated: noop,\n            empty: noop,\n            drain: noop,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n                _insert(q, data, false, callback);\n            },\n            kill: function () {\n                q.drain = noop;\n                q.tasks = [];\n            },\n            unshift: function (data, callback) {\n                _insert(q, data, true, callback);\n            },\n            process: function () {\n                while(!q.paused && workers < q.concurrency && q.tasks.length){\n\n                    var tasks = q.payload ?\n                        q.tasks.splice(0, q.payload) :\n                        q.tasks.splice(0, q.tasks.length);\n\n                    var data = _map(tasks, function (task) {\n                        return task.data;\n                    });\n\n                    if (q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    workersList.push(tasks[0]);\n                    var cb = only_once(_next(q, tasks));\n                    worker(data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            workersList: function () {\n                return workersList;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                q.paused = true;\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                var resumeCount = Math.min(q.concurrency, q.tasks.length);\n                // Need to call q.process once per concurrent\n                // worker to preserve full concurrency after pause\n                for (var w = 1; w <= resumeCount; w++) {\n                    async.setImmediate(q.process);\n                }\n            }\n        };\n        return q;\n    }\n\n    async.queue = function (worker, concurrency) {\n        var q = _queue(function (items, cb) {\n            worker(items[0], cb);\n        }, concurrency, 1);\n\n        return q;\n    };\n\n    async.priorityQueue = function (worker, concurrency) {\n\n        function _compareTasks(a, b){\n            return a.priority - b.priority;\n        }\n\n        function _binarySearch(sequence, item, compare) {\n            var beg = -1,\n                end = sequence.length - 1;\n            while (beg < end) {\n                var mid = beg + ((end - beg + 1) >>> 1);\n                if (compare(item, sequence[mid]) >= 0) {\n                    beg = mid;\n                } else {\n                    end = mid - 1;\n                }\n            }\n            return beg;\n        }\n\n        function _insert(q, data, priority, callback) {\n            if (callback != null && typeof callback !== \"function\") {\n                throw new Error(\"task callback must be a function\");\n            }\n            q.started = true;\n            if (!_isArray(data)) {\n                data = [data];\n            }\n            if(data.length === 0) {\n                // call drain immediately if there are no tasks\n                return async.setImmediate(function() {\n                    q.drain();\n                });\n            }\n            _arrayEach(data, function(task) {\n                var item = {\n                    data: task,\n                    priority: priority,\n                    callback: typeof callback === 'function' ? callback : noop\n                };\n\n                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n                if (q.tasks.length === q.concurrency) {\n                    q.saturated();\n                }\n                async.setImmediate(q.process);\n            });\n        }\n\n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n\n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n            _insert(q, data, priority, callback);\n        };\n\n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        return _queue(worker, 1, payload);\n    };\n\n    function _console_fn(name) {\n        return _restParam(function (fn, args) {\n            fn.apply(null, args.concat([_restParam(function (err, args) {\n                if (typeof console === 'object') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _arrayEach(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            })]));\n        });\n    }\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        var has = Object.prototype.hasOwnProperty;\n        hasher = hasher || identity;\n        var memoized = _restParam(function memoized(args) {\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (has.call(memo, key)) {   \n                async.setImmediate(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (has.call(queues, key)) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([_restParam(function (args) {\n                    memo[key] = args;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                        q[i].apply(null, args);\n                    }\n                })]));\n            }\n        });\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n        return function () {\n            return (fn.unmemoized || fn).apply(null, arguments);\n        };\n    };\n\n    function _times(mapper) {\n        return function (count, iterator, callback) {\n            mapper(_range(count), iterator, callback);\n        };\n    }\n\n    async.times = _times(async.map);\n    async.timesSeries = _times(async.mapSeries);\n    async.timesLimit = function (count, limit, iterator, callback) {\n        return async.mapLimit(_range(count), limit, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return _restParam(function (args) {\n            var that = this;\n\n            var callback = args[args.length - 1];\n            if (typeof callback == 'function') {\n                args.pop();\n            } else {\n                callback = noop;\n            }\n\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {\n                    cb(err, nextargs);\n                })]));\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        });\n    };\n\n    async.compose = function (/* functions... */) {\n        return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n\n    function _applyEach(eachfn) {\n        return _restParam(function(fns, args) {\n            var go = _restParam(function(args) {\n                var that = this;\n                var callback = args.pop();\n                return eachfn(fns, function (fn, _, cb) {\n                    fn.apply(that, args.concat([cb]));\n                },\n                callback);\n            });\n            if (args.length) {\n                return go.apply(this, args);\n            }\n            else {\n                return go;\n            }\n        });\n    }\n\n    async.applyEach = _applyEach(async.eachOf);\n    async.applyEachSeries = _applyEach(async.eachOfSeries);\n\n\n    async.forever = function (fn, callback) {\n        var done = only_once(callback || noop);\n        var task = ensureAsync(fn);\n        function next(err) {\n            if (err) {\n                return done(err);\n            }\n            task(next);\n        }\n        next();\n    };\n\n    function ensureAsync(fn) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            args.push(function () {\n                var innerArgs = arguments;\n                if (sync) {\n                    async.setImmediate(function () {\n                        callback.apply(null, innerArgs);\n                    });\n                } else {\n                    callback.apply(null, innerArgs);\n                }\n            });\n            var sync = true;\n            fn.apply(this, args);\n            sync = false;\n        });\n    }\n\n    async.ensureAsync = ensureAsync;\n\n    async.constant = _restParam(function(values) {\n        var args = [null].concat(values);\n        return function (callback) {\n            return callback.apply(this, args);\n        };\n    });\n\n    async.wrapSync =\n    async.asyncify = function asyncify(func) {\n        return _restParam(function (args) {\n            var callback = args.pop();\n            var result;\n            try {\n                result = func.apply(this, args);\n            } catch (e) {\n                return callback(e);\n            }\n            // if result is Promise object\n            if (_isObject(result) && typeof result.then === \"function\") {\n                result.then(function(value) {\n                    callback(null, value);\n                })[\"catch\"](function(err) {\n                    callback(err.message ? err : new Error(err));\n                });\n            } else {\n                callback(null, result);\n            }\n        });\n    };\n\n    // Node.js\n    if (typeof module === 'object' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n\n}).call(this,require('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"_process\":4}],4:[function(require,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}]},{},[2,1])(2)\n});\n//# sourceMappingURL=data:application/json;charset:utf-8;base64,\n"],"file":"async-chainable.js","sourceRoot":"/source/"}